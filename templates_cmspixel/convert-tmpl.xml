<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!--
============================================================================================================================
   Steering File generated by Marlin GUI on Thu Jul 11 11:06:25 2013

   WARNING: - Please be aware that comments made in the original steering file were lost.
            - Processors that are not installed in your Marlin binary lost their parameter's descriptions and types as well.
            - Extra parameters that aren't categorized as default in a processor lost their description and type.
============================================================================================================================
-->


<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

   <execute>
      <processor name="MyAIDAProcessor"/>
      <processor name="MyEUTelConvertCMSPixel"/>
      <processor name="AutoPedestalNoiseProcessor"/>
      <processor name="HotPixelKiller"/>
      <processor name="MyLCIOOutputProcessor"/>
      <processor name="MyEUTelUtilityPrintEventNumber"/>
      <!--processor name="MyCMSPixelCalibrateEventProcessor"/-->
   </execute>

   <global>
      <parameter name="LCIOInputFiles"> </parameter>
      <parameter name="GearXMLFile" value="@GeometryPath@/@GearFile@"/>
      <parameter name="MaxRecordNumber" value="@NumEvents@"/>
      <parameter name="SkipNEvents" value="0"/>
      <parameter name="SupressCheck" value="false"/>
      <parameter name="Verbosity" value="@Verbosity@"/>
   </global>

 <processor name="MyAIDAProcessor" type="AIDAProcessor">
 <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
  <!-- compression of output file 0: false >0: true (default) -->
  <parameter name="Compress" type="int" value="1"/>
  <!-- filename without extension-->
  <parameter name="FileName" type="string" value="@HistogramPath@/@RunNumber@-convert"/>
  <!-- type of output file root (default) or xml )-->
  <parameter name="FileType" type="string" value="root"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="MyEUTelConvertCMSPixel" type="EUTelConvertCMSPixel">
 <!--Reads PSI46 testboard data files and creates LCEvents (zero suppressed data as sparsePixel).
Make sure to not specify any LCIOInputFiles in the steering in order to read CMSPixel files.-->
  <!--Name of the output sparsified data collection-->
  <parameter name="sparseDataCollectionName" type="string" lcioOutType="TrackerData"> data </parameter>
  <!--Input file-->
  <parameter name="FileName" type="string" value="@CMSNativePath@/@Native@"/>
  <!--Switch on or off the histogram filling-->
  <parameter name="HistogramFilling" type="bool" value="true"/>
  <!--Choose the ROC type. Can be: psi46v2, psi46xdb, psi46dig_trig, psi46dig, psi46digv2_b, psi46digv2.-->
  <parameter name="ROC_type" type="int" value="@rocType@"/>
  <!--Reject events with any decoding issues -->
  <parameter name="RejectEvents" type="bool" value="@rejectEvents@"/>
  <!--Choose the Testboard type. Can be: PSI_ATB, PSI_DTB, RAL-->
  <parameter name="TB_type" type="string" value="@tbType@"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <parameter name="Verbosity" type="string" value="@Verbosity@"/>
  <!--Address levels calibration file for the TBM and ROC address encoding levels.-->
  <parameter name="addressLevelsFile" type="string" value="addressParameters.dat"/>
  <!--Decoding statistics output file. -->
  <parameter name="statisticsFile" type="string" value="@ResultsPath@/@RunNumber@-decoding.txt"/>
  <!--Gives the possibilty to cut our a rectangle from the hitmap and evaluate the trigger phase only for events with pixel hits in this region. Format is: ROC COL_MIN COL_MAX ROW_MIN ROW_MAX. Example: 5 34 52 33 54 gives a rectange on ROC5 between 34 <= x <= 52; 33 <= y <= 54.-->
  <parameter name="cutHitmap" type="IntVec"> @cutHitmap@ </parameter>
  <!--Set decoder verbosity level: QUIET, SUMMARY, ERROR, WARNING, INFO, DEBUG, DEBUG1-4-->
  <parameter name="debugDecoder" type="string" value="@debugDec@"/>
  <!--Switch TBM mode on and off. This gives the possibility to read data without real or emulated TBM headers as seen from soem testboard FPGAs. TRUE will look for TBM headers and trailers.-->
  <parameter name="haveTBMheaders" type="bool" value="@TBMheaders@"/>
  <!--RunNumber-->
  <parameter name="runNumber" type="string" value="@RunNumber@"/>
  <!--int vector to hold the telescope plane IDs in the order in which they get the readout token.-->
  <parameter name="shufflePlanes" type="IntVec"> 0 1 2 3 4 5 6 7 </parameter>
  <!--Enable or disable the writing of events with no hit in all sensor planes.-->
  <parameter name="writeEmptyEvents" type="bool" value="@emptyEvents@"/>
</processor>

 <processor name="AutoPedestalNoiseProcessor" type="EUTelAutoPedestalNoiseProcessor">
 <!--EUTelAutoPedestalNoiseProcessor produces initial pedestal / noise / status with user provided values-->
  <!--Noise local collection-->
  <parameter name="NoiseCollectionName" type="string" lcioOutType="TrackerData"> cmspx_noise </parameter>
  <!--Pedestal local collection-->
  <parameter name="PedestalCollectionName" type="string" lcioOutType="TrackerData"> cmspx_pedestal </parameter>
  <!--Pixel status collection-->
  <parameter name="StatusCollectionName" type="string" lcioOutType="TrackerRawData"> cmspx_status </parameter>
  <!--The initial value of noise (one value for detector)-->
  <parameter name="InitNoiseValue" type="FloatVec"> 1 1 1 1 1 1 1 1 </parameter>
  <!--The initial value of pedestal (one value for detector)-->
  <parameter name="InitPedestalValue" type="FloatVec"> 0 0 0 0 0 0 0 0 </parameter>
  <!--The maximum pixel along x (default 255, one value per detector)-->
  <parameter name="MaxXVector" type="IntVec"> 51 51 51 51 51 51 51 51 </parameter>
  <!--The maximum pixel along y (default 255, one value per detector)-->
  <parameter name="MaxYVector" type="IntVec"> 79 79 79 79 79 79 79 79 </parameter>
  <!--The minimum pixel along x (default 0, one value per detector)-->
  <parameter name="MinXVector" type="IntVec"> 0 0 0 0 0 0 0 0 </parameter>
  <!--The minimum pixel along y (default 0, one value per detector)-->
  <parameter name="MinYVector" type="IntVec"> 0 0 0 0 0 0 0 0 </parameter>
  <!--The sensorID for the generated collection (one per detector)-->
  <parameter name="SensorIDVec" type="IntVec"> 0 1 2 3 4 5 6 7 </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="HotPixelKiller" type="EUTelHotPixelKiller">
 <!--EUTelHotPixelKiller periodically check for pixel singing loud too often and remove them from the analysis-->
  <!--Noise (input) collection name-->
  <parameter name="NoiseCollectionName" type="string" lcioInType="TrackerData"> cmspx_noise </parameter>
  <!--Pixel status (input) collection name-->
  <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> cmspx_status </parameter>
  <!--Input of Zero Suppressed data-->
  <parameter name="ZSDataCollectionName" type="string" lcioInType="TrackerData"> data </parameter>
  <!--This flag is used to initialise simple data decoding and hot pixel finder (0-no, 1-yes)-->
  <parameter name="BuildHotPixelDatabase" type="int" value="1"/>
  <!--The list of sensor ids that have to be excluded from the clustering.-->
  <!--parameter name="ExcludedPlanes" type="IntVec"> </parameter-->
  <!--This is the name of the hot pixel collection to be saved into the output slcio file-->
  <parameter name="HotPixelCollectionName" type="string" value="hotpixel"/>
  <!--This is the name of the LCIO file name with the output hotpixel db (add .slcio)-->
  <parameter name="HotPixelDBFile" type="string" value="@DatabasePath@/run@RunNumber@-hotpixel.slcio"/>
  <!--Write mode for HotPixelDB file:  WRITE_APPEND or WRITE_NEW-->
  <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
  <!--This float number [0,1] represents the maximum allowed firing frequency
within the selected number of event per cycle-->
  <parameter name="MaxAllowedFiringFreq" type="float" value="@hotpixelFrequency@"/>
  <!-- Sorry, this parameter isn't a default parameter for this processor: description and type lost!!  -->
  <parameter name="NZSDataCollectionName" value="nodata"/>
  <!--The number of events to be considered for each update cycle-->
  <parameter name="NoOfEventPerCycle" type="int" value="3333"/>
  <!--The total number of hot pixel cycle-->
  <parameter name="TotalNoOfCycle" type="int" value="11"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="MyLCIOOutputProcessor" type="LCIOOutputProcessor">
 <!--Writes the current event to the specified LCIO outputfile. Needs to be the last ActiveProcessor.-->
  <!--drops the named collections from the event-->
  <!--parameter name="DropCollectionNames" type="StringVec"> TPCHits HCalHits </parameter-->
  <!--drops all collections of the given type from the event-->
  <!--parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter-->
  <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
  <!--parameter name="FullSubsetCollections" type="StringVec" value="MCParticlesSkimmed"/-->
  <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
  <!--parameter name="KeepCollectionNames" type="StringVec" value="MyPreciousSimTrackerHits"/-->
  <!-- name of output file -->
  <parameter name="LCIOOutputFile" type="string" value="@ResultsPath@/@RunNumber@-convert.slcio"/>
  <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
  <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
  <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
  <!--parameter name="SplitFileSizekB" type="int" value="1992294"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="MyEUTelUtilityPrintEventNumber" type="EUTelUtilityPrintEventNumber">
 <!--EUTelUtilityPrintEventNumber prints event number to screen depending on the verbosity level-->
  <!--Print event number for every n-th event-->
  <parameter name="EveryNEvents" type="int" value="@PrintNEvents@"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--print the event timestamp as read from LCIO-->
  <parameter name="printTimestamp" type="bool" value="false"/>
</processor>

 <processor name="MyCMSPixelCalibrateEventProcessor" type="CMSPixelCalibrateEventProcessor">
 <!--CMSPixelCalibrateEventProcessor calibrates the input data according to the tanh fit performed by a module full test with psi46expert.-->
  <!--Input zero suppressed data collection-->
  <parameter name="sparseDataCollectionName" type="string" lcioInType="TrackerData"> sparse </parameter>
  <!--Name of the output calibrated data collection-->
  <parameter name="CalibratedDataCollectionName" type="string" lcioOutType="TrackerData"> data </parameter>
  <!--Switch on or off the histogram filling-->
  <parameter name="HistogramFilling" type="bool" value="true"/>
  <!--Type of sparsified pixel data structure (use SparsePixelType enum)-->
  <parameter name="SparsePixelType" type="int" value="1"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
  <!--Calibration file prefix containing the p0-p3 parameters for the Tanh fit. Use %i for the ROC number.-->
  <parameter name="calibrationFile" type="string" value="@CMSCalibrPath@/@RunNumber@/phCalibrationFit60_C%i.dat"/>
  <!--Switch between calibration input data types phCalibration (0)  and Gaintanh calibration (1).-->
  <parameter name="calibrationType" type="bool" value="true"/>
</processor>

</marlin>
